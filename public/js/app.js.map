{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _Map = require('./components/Map');\n\nvar _Map2 = _interopRequireDefault(_Map);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar map = null;\n$(function () {\n    if ($('#map').length > 0) {\n        map = new _Map2.default();\n    }\n});\n\n},{\"./components/Map\":2}],2:[function(require,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Map = function () {\n    function Map() {\n        var _this = this;\n\n        _classCallCheck(this, Map);\n\n        this.updateInterval = 3000;\n        mapboxgl.accessToken = 'pk.eyJ1IjoiYW5kZXJzZ2wiLCJhIjoiY2lqMDE4a2dhMDAzOHYybTUyenZ6ZmlxZiJ9.eCEhAY2tvbxtGSaXR3pkUA';\n        this.map = new mapboxgl.Map({\n            container: 'map', // container id\n            style: 'mapbox://styles/mapbox/satellite-streets-v9', //stylesheet location\n            center: [10.3644205, 55.306425],\n            zoom: 15\n        });\n\n        this.dragged = false;\n        this.latestPos = 0;\n\n        this.source = new mapboxgl.GeoJSONSource({\n            'type': 'geojson',\n            'data': {\n                'type': 'Feature',\n                'properties': {},\n                'geometry': {\n                    'type': 'LineString',\n                    'coordinates': []\n                }\n            }\n        });\n\n        this.sourceData = {\n            'type': 'Feature',\n            'properties': {},\n            'geometry': {\n                'type': 'LineString',\n                'coordinates': []\n            }\n        };\n\n        this.map.on('load', function () {\n\n            _this.map.addSource('route', _this.source);\n\n            _this.map.addLayer({\n                'id': 'route',\n                'type': 'line',\n                'source': 'route',\n                'layout': {\n                    'line-join': 'round',\n                    'line-cap': 'round'\n                },\n                'paint': {\n                    'line-color': 'red',\n                    'line-width': 5\n                }\n            });\n\n            _this.getPostions();\n        });\n\n        this.map.on('dragstart', function () {\n            _this.dragged = true;\n        });\n    }\n\n    _createClass(Map, [{\n        key: 'getPostions',\n        value: function getPostions() {\n            var _this2 = this;\n\n            $.getJSON('/map/positions/' + this.latestPos, function (data) {\n                if (data) {\n                    if (data.latest !== undefined) {\n                        if (parseInt(data.latest) > _this2.latestPos) {\n                            _this2.latestPos = parseInt(data.latest);\n                        }\n                    }\n                    if (data.positions !== undefined && data.positions.length > 0) {\n                        _this2.parsePositions(data.positions);\n                    }\n                }\n\n                setTimeout(function () {\n                    _this2.getPostions();\n                }, _this2.updateInterval);\n            });\n        }\n    }, {\n        key: 'parsePositions',\n        value: function parsePositions(positions) {\n            this.sourceData.geometry.coordinates = this.sourceData.geometry.coordinates.concat(positions);\n            this.source.setData(this.sourceData);\n\n            if (!this.dragged) {\n                this.map.setCenter(positions[positions.length - 1]);\n            }\n        }\n    }]);\n\n    return Map;\n}();\n\nexports.default = Map;\n\n},{}]},{},[1]);\n"],"file":"app.js","sourceRoot":"/source/"}